# python_study
#git 学习
    每次都需要输入用户名和密码是因为你采用的是 https 方式提交代码， 如果采用的是 ssh 方式只需要在版本库中添加用户的 sha 的key就可以实现提交时无需输入用户名和密码。如果你的版本库已经用https 方式创建好了，那么就需要先删除原来的提交方式。
    在终端执行以下指令：
    git remote rm origin
    git remote add origin git@github.com:(用户名)/版本库名
    
    HEAD 指向的版本就是当前版本
    
    git config --global user.name ""                 #设置名字
    git config --global user.email ""                #设置名字
    git init                                         #通过git init命令把目录变成Git可以管理的仓库
    git remote add origin XXX                        #添加远程仓库git@github.com:XXX/XXX.git
    git add                                          #用命令git add告诉Git，把文件添加到仓库,把修改的文件添加到暂存区（版本库）
    git commit -m "XX"                               #用命令git commit告诉Git，把文件提交到仓库，把暂存区提交到仓库
    git checkout -- XX.XX                            #撤销修改，让这个文件回到最近一次git commit或git add时的状态
    git checkout XXX                                 #切换到分支XXX(-b XXX 新建XXX并切换到XXX)
    git status                                       #查看仓库当前的状态
    git diff                                         #查看文件变化
    git log                                          #查看修改历史记录，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
    git log --graph --pretty=oneline --abbrev-commit #查看分支的合并情况
    git reset --hard HEAD~                           #回退到HEAD~版本，上一个版本就是HEAD~
    git reset HEAD file                              #可以把暂存区的修改撤销掉（unstage），重新放回工作区
    git merge --no-ff -m "XX" dev                    #合并分支，--no-ff 普通模式合并，合并后的历史有分支，能看出来曾经做过合并
    git branch -d xxxxx                              #删除本地分支
    git branch -a                                    #查看远程仓库分支
    git reflog                                       #用来记录每一次命令
    git diff HEAD -- readme.txt                      #查看工作区和版本库里面最新版本的区别
    git stash                                        #保存当前branch，list 查看，apply恢复不删除，drop删除，pop恢复又删除
    git branch --set-upstream dev origin/dev         #指定本地dev分支与远程origin/dev分支的链接
    git remote                                       #查看远程库的信息,-v更详细的信息
    git push origin test:master                      #提交本地test分支作为远程的master分支
    git checkout branch                              #test
